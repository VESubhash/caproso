{"version":3,"sources":["webpack:///./src/app/layout/manage-affiliates/manage-affiliates-routing.module.ts","webpack:///./src/app/layout/manage-affiliates/manage-affiliates.component.html","webpack:///./src/app/layout/manage-affiliates/manage-affiliates.component.scss","webpack:///./src/app/layout/manage-affiliates/manage-affiliates.component.ts","webpack:///./src/app/layout/manage-affiliates/manage-affiliates.module.ts"],"names":[],"mappings":"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","file":"manage-affiliates-manage-affiliates-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ManageAffiliatesComponent } from './manage-affiliates.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: ManageAffiliatesComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class ManageAffiliatesRoutingModule {\n}\n","module.exports = \"<div class=\\\"col-md-12\\\">\\r\\n    <h3 class=\\\"one\\\">Manage Affiliate</h3>\\r\\n    <button class=\\\"btn btn-primary float-right\\\" (click)=\\\"addAffiliate()\\\">Add Affiliate</button>\\r\\n    <div class=\\\"card-body table-responsive\\\">\\r\\n        <table datatable [dtOptions]=\\\"dtOptions\\\" class=\\\"table table-bordered user-table display\\\">\\r\\n            <thead>\\r\\n            <tr>\\r\\n                <th>Affiliate Name</th>\\r\\n                <th>User Name</th>\\r\\n                <th>First name</th>\\r\\n                <th>Last name</th>\\r\\n                <th>Created Date</th>\\r\\n                <th>Active</th>\\r\\n                <th>Action</th>\\r\\n            </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n            <tr *ngFor=\\\"let affiliate of affiliates; let odd=odd; let even=even\\\" [ngClass]=\\\"{ odd: odd, even:even}\\\">\\r\\n\\r\\n                <td>{{ affiliate.AffiliateName }}</td>\\r\\n                <td>{{ affiliate.UserName }}</td>\\r\\n                <td>{{ affiliate.FirstName }}</td>\\r\\n                <td>{{ affiliate.LastName }}</td>\\r\\n                <td>{{ affiliate.CreatedDate | date:'MM/dd/yyyy hh:mm:ss' }}</td>\\r\\n\\r\\n                <!--<td>-->\\r\\n                    <!--<div class=\\\"wrapper\\\">-->\\r\\n                        <!--<div>-->\\r\\n                            <!--<div class=\\\"dropdown\\\">-->\\r\\n                                <!--<button class=\\\"dropbtn\\\"-->\\r\\n                                        <!--[ngClass]=\\\"{'bg-success': affiliate.IsActive.toString().toLowerCase() === 'true', 'bg-danger': affiliate.IsActive.toString().toLowerCase() === 'false' }\\\">-->\\r\\n                                    <!--{{affiliate.IsActive.toString().toLowerCase() === 'true'? 'Active': 'InActive'}}-->\\r\\n                                <!--</button>-->\\r\\n                                <!--<div class=\\\"dropdown-content\\\">-->\\r\\n                                    <!--<a (click)=\\\"onStatusChange(affiliate,false)\\\">Active</a>-->\\r\\n                                    <!--<a (click)=\\\"onStatusChange(affiliate,true)\\\">InActive</a>-->\\r\\n                                <!--</div>-->\\r\\n                            <!--</div>-->\\r\\n                            <!--<div style=\\\"display: none\\\"> {{affiliate.IsActive.toString().toLowerCase()}}</div>-->\\r\\n                        <!--</div>-->\\r\\n                        <!--<div  class=\\\"button\\\" *ngIf=\\\"editActive\\\" >-->\\r\\n                            <!--{{affiliate.IsActive.toString().toLowerCase()}}-->\\r\\n                            <!--<select [(ngModel)]=\\\"affiliate.IsActive\\\">-->\\r\\n                            <!--<option *ngFor=\\\"let active of activeModel\\\" [(value)]=\\\"active.value\\\">{{active.name}}</option>-->\\r\\n                            <!--</select>-->\\r\\n                        <!--</div>-->\\r\\n                    <!--</div>-->\\r\\n\\r\\n                <!--</td>-->\\r\\n                <td>\\r\\n                    <button (click)=\\\"onStatusChange(affiliate,affiliate.IsActive)\\\" class=\\\"dropbtn\\\"\\r\\n                            [ngClass]=\\\"{'bg-success': affiliate.IsActive.toString().toLowerCase() === 'true', 'bg-danger': affiliate.IsActive.toString().toLowerCase() === 'false' }\\\">\\r\\n                        {{affiliate.IsActive.toString().toLowerCase() === 'true'? 'Active': 'InActive'}}\\r\\n                    </button>\\r\\n                </td>\\r\\n                <td>\\r\\n                    <button class=\\\"btn-space\\\"\\r\\n                            (click)=\\\"goToAffiliateDetail(affiliate.UserId, affiliate.AffiliateId, affiliate.AffiliateName)\\\">\\r\\n                        <i class=\\\"fa fa-pencil\\\"></i></button>\\r\\n                    <button btn-space><i class=\\\"fa fa-trash\\\"></i></button>\\r\\n                </td>\\r\\n\\r\\n            </tr>\\r\\n\\r\\n            <tr *ngIf=\\\"affiliate?.length == 0\\\">\\r\\n                <td colspan=\\\"3\\\" class=\\\"no-data-available\\\">No data!</td>\\r\\n            </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\"","module.exports = \"/*\\r\\n   server-side-angular-way.component.css\\r\\n*/\\n.no-data-available {\\n  text-align: center; }\\n/*\\r\\n   src/styles.css (i.e. your global style)\\r\\n*/\\n.user-table {\\n  width: 100% !important; }\\n.btn-space {\\n  margin-right: 5px; }\\n.wrapper .btn {\\n  width: 100%; }\\n.button {\\n  display: none; }\\n.wrapper:hover div {\\n  /* Change the filter in here */ }\\n.wrapper:hover .button {\\n  display: inline-block; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AffiliatesModal } from './AffiliatesModal';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AffiliatesService } from '../../services/affiliates.service';\nimport {ActiveModel} from '../../model/ActiveModel';\nimport {UserService} from '../../services/user.service';\nimport {AlertService} from '../../services/alert.service';\nimport {ClientsModal} from '../manage-clients/ClientsModal';\n\n\n@Component({\n    selector: 'manage-affiliates',\n    templateUrl: './manage-affiliates.component.html',\n    styleUrls: ['./manage-affiliates.component.scss']\n})\n\n\nexport class ManageAffiliatesComponent implements OnInit {\n    dtOptions: DataTables.Settings = {};\n    affiliates: AffiliatesModal[];\n    userId: number;\n    activeModel: ActiveModel[];\n    editActive: boolean;\n    constructor(private httpUserService: UserService\n               , private httpService: AffiliatesService\n               , private alertService: AlertService\n               , private router: Router\n               , private route: ActivatedRoute) {\n    }\n\n    ngOnInit(): void {\n\n        this.route\n            .queryParams\n            .subscribe(params => {\n                this.userId = params['id'] || 0;\n            });\n        this.bindAffiliateTable();\n        this.loadActiveModel();\n    }\n\n    bindAffiliateTable(): void {\n        this.dtOptions = {\n            pagingType: 'full_numbers',\n            pageLength: 10,\n            serverSide: true,\n            processing: true,\n            ajax: (dataTablesParameters: any, callback) => {\n                this.httpService.get(dataTablesParameters).subscribe(resp => {\n                    this.affiliates = resp[0].Data;\n                    callback({\n                        recordsTotal: resp[0].RecordsTotal,\n                        recordsFiltered: resp[0].RecordsFiltered,\n                        data: []\n                    });\n                });\n            },\n            columns: [{data: 'AffiliateName'}, { data: 'UserName'}, {data: 'FirstName'}, {data: 'LastName'}, {data: 'IsActive'}, , {data: 'CreatedDate'}]\n        };\n    }\n\n    public addAffiliate() {\n        localStorage.removeItem('affiliateId');\n        localStorage.removeItem('affiliateName');\n        this.router.navigate(['/affiliate-detail']);\n    }\n\n    public goToAffiliateDetail(userId: number, affiliatedId: number, affiliateName: string ) {\n        localStorage.setItem('affiliateId', affiliatedId.toString() );\n        localStorage.setItem('affiliateName', affiliateName);\n        this.router.navigate(['affiliate-detail']);\n\n    }\n    public  loadActiveModel(){\n        this.activeModel = [{\"value\": 'True' ,\"name\": 'Active'},{\"value\": 'False' ,\"name\": 'InActive'}];\n    }\n\n    public onStatusChange(affiliate: AffiliatesModal, isActive: boolean) {\n        this.httpUserService.updateActive(affiliate.UserId, isActive)\n            .subscribe(\n                (data) => {\n\n                    if (data) {\n                        affiliate.IsActive = !isActive;\n                        this.alertService.success(affiliate.IsActive ? 'Affiliate activate successfully' : 'Affiliate deactivate successfully', false);\n                    }\n                    else {\n                        this.alertService.success('Something wrong please contact to administrator.');\n                    }\n                },\n                error => {\n                    this.alertService.error(error);\n                    // this.loading = false;\n                });\n    }\n\n\n    public  showActive(){\n        this.editActive =!this.editActive;\n    }\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgbCarouselModule, NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ManageAffiliatesRoutingModule } from './manage-affiliates-routing.module';\nimport { DataTablesModule } from 'angular-datatables';\nimport { StatModule } from '../../shared';\nimport { ManageAffiliatesComponent } from './manage-affiliates.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        NgbCarouselModule.forRoot(),\n        NgbAlertModule.forRoot(),\n        ManageAffiliatesRoutingModule,\n        StatModule,\n        DataTablesModule,\n        FormsModule\n    ],\n    declarations: [ManageAffiliatesComponent]\n\n})\nexport class ManageAffiliatesModule {}\n"],"sourceRoot":""}